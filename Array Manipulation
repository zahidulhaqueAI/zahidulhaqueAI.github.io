// link 
// https://www.hackerrank.com/challenges/crush/problem

package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

// Complete the arrayManipulation function below.
func arrayManipulation(n int32, queries [][]int32) int64 {
    // taking index 1 greater than the given index.This is because we will not append           the whole values in the given range.Infact will append the value at the 1st index        and the one value with reverse sign out of the given index.Later we will add the         values index by index
    
    // hold the max value
    var max int64
    max = -100000000000000
    var sum int64
    sum = 0
    tempSum := make([]int64,n+2)

    var i int32    
    for i=1; i <= int32(len(queries)); i++{
        // queries[i][0] => a
        // queries[i][1] => b
        // queries[i][2] => k
        a := queries[i-1][0]
        b := queries[i-1][1]
        k := queries[i-1][2]

        // hold the sum value at each index.Doing so that I don't want to again iterate             the tempQuery.This will make the time complexity to (10e7*10e9)
        tempSum[a] += int64(k)
        tempSum[b+1] += int64(-k) 
    }
    for i=1; i<=n; i++{
        sum += tempSum[i]
        if max <= sum{
            max = sum
        }
    }
    return max
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 1024 * 1024)

    nm := strings.Split(readLine(reader), " ")

    nTemp, err := strconv.ParseInt(nm[0], 10, 64)
    checkError(err)
    n := int32(nTemp)

    mTemp, err := strconv.ParseInt(nm[1], 10, 64)
    checkError(err)
    m := int32(mTemp)

    var queries [][]int32
    for i := 0; i < int(m); i++ {
        queriesRowTemp := strings.Split(readLine(reader), " ")

        var queriesRow []int32
        for _, queriesRowItem := range queriesRowTemp {
            queriesItemTemp, err := strconv.ParseInt(queriesRowItem, 10, 64)
            checkError(err)
            queriesItem := int32(queriesItemTemp)
            queriesRow = append(queriesRow, queriesItem)
        }

        if len(queriesRow) != int(3) {
            panic("Bad input")
        }

        queries = append(queries, queriesRow)
    }

    result := arrayManipulation(n, queries)

    fmt.Fprintf(writer, "%d\n", result)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}
